# -*- coding: utf-8 -*-
"""Phase4_decision_tree_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wjLw4HcTYhcAHespBF6aQJGX8YfZvHfx
"""

import pandas as pd

df = pd.read_csv("final.csv")
df.head()

from sklearn.model_selection import train_test_split

X = df.drop('suicides_per_100k', axis='columns')
y = df['suicides_per_100k']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.33)

from sklearn.tree import DecisionTreeRegressor

from sklearn.metrics import mean_squared_error as MSE

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=3)

dt = DecisionTreeRegressor(min_samples_leaf=0.1, random_state=3)

dt.fit(X_train, y_train)

dt.get_params()

predictions = dt.predict(X_test)

X_test

predictions

dt.score(X_test, y_test)

feature_names = X.columns

feature_names

dt.feature_importances_

feature_importance = pd.DataFrame(dt.feature_importances_, index = feature_names).sort_values(0, ascending=False)
feature_importance

features = list(feature_importance[feature_importance[0]>0].index)
features

feature_importance.head(10).plot(kind='bar')

from sklearn import tree
from matplotlib import pyplot as plt

fig = plt.figure(figsize=(25,20))
_ = tree.plot_tree(dt, 
                   feature_names=feature_names,
                   filled=True,
                  fontsize=12)

from sklearn.metrics import mean_absolute_error

mean_absolute_error(y_test, predictions)

from sklearn.metrics import mean_squared_error

mean_squared_error(y_test, predictions)

from sklearn.metrics import r2_score

r2_score(y_test, predictions)

mean_squared_error(y_test, predictions, squared=False)
